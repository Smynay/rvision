{"version":3,"sources":["models/task.ts","utils/constants.tsx","components/organisms/footer/Footer.tsx","components/organisms/header/Header.tsx","components/layouts/default-layout/DefaultLayout.tsx","components/molecules/status-indicator/StatusIndicator.tsx","components/molecules/task-plate/TaskPlate.tsx","components/molecules/task-column/TaskColumn.tsx","components/organisms/task-board/TaskBoard.tsx","components/templates/main-template/MainTemplate.tsx","services/local-storage.service.ts","services/task.service.ts","storages/task.storage.ts","components/pages/HomePage.tsx","routers/main.router.tsx","components/templates/error-template/ErrorTemplate.tsx","components/pages/ErrorPage.tsx","routers/error.router.tsx","routers/root.router.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","BASENAME","process","split","slice","join","ERROR_PATH","LOCAL_STORAGE_TASKS_TAG","Footer","Box","component","Container","maxWidth","Typography","variant","align","Header","title","AppBar","position","Toolbar","DefaultLayout","children","className","py","StatusIndicator","status","display","alignItems","COULD","fontSize","color","SHOULD","MUST","TaskPlate","taskData","Card","p","gutterBottom","id","justifyContent","priority","name","surname","TaskColumn","config","taskArray","droppableId","droppableProvided","ref","innerRef","mt","map","task","index","draggableId","draggableProvided","draggableProps","dragHandleProps","placeholder","boardConfiguration","columns","PLAN","IN_PROGRESS","TESTING","DONE","TaskBoard","observer","store","tasks","onDragEnd","result","destinationStatus","destination","sourceStatus","source","updateTaskStatusById","columnConfing","filter","MainTemplate","taskStore","LocalStorageServiceInstance","key","entitiesFromStore","JSON","parse","localStorage","getItem","data","setItem","stringify","TaskServiceInstance","a","fetch","res","json","transportLayer","repositoriesLayer","isLoading","makeAutoObservable","this","tasksFromStorage","loadData","loadTasks","fetchTasks","saveData","HomePage","MainRouter","exact","path","to","ErrorTemplate","ErrorPage","ErrorRouter","RootRouter","basename","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6d0d437.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  PLAN = 'PLAN',\r\n  IN_PROGRESS = 'IN_PROGRESS',\r\n  TESTING = 'TESTING',\r\n  DONE = 'DONE',\r\n}\r\n\r\nexport enum TaskPriority {\r\n  MUST = 'MUST',\r\n  SHOULD = 'SHOULD',\r\n  COULD = 'COULD',\r\n}\r\n\r\nexport interface ITask {\r\n  id: string;\r\n  title: string;\r\n  name: string;\r\n  surname: string;\r\n  status: TaskStatus;\r\n  priority: TaskPriority;\r\n  date: string;\r\n}\r\n","// APP ROUTER PATHS:\r\nexport const URL = process.env.PUBLIC_URL;\r\nexport const BASENAME = '/' + process.env.PUBLIC_URL.split('/').slice(1).join('/')\r\nexport const MAIN_PATH = '/';\r\nexport const ERROR_PATH = '/error';\r\n\r\n// APP PREFERENCES:\r\nexport const LOCAL_STORAGE_TASKS_TAG = 'TASKS';\r\n","import { Box, Container, Typography } from '@material-ui/core';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Box component=\"footer\">\r\n      <Container maxWidth=\"lg\">\r\n        <Typography variant=\"caption\" component=\"p\" align=\"center\">\r\n          TaskBoard App 2021\r\n        </Typography>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\nexport type HeaderPropTypes = { title?: string };\r\n\r\nconst Header = ({ title }: HeaderPropTypes) => {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        {/* TODO: Add sidebar */}\r\n        {/* <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon />\r\n        </IconButton> */}\r\n        <Typography variant=\"h6\">\r\n          TaskBoard App {title && `- ${title}`}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Container } from '@material-ui/core';\r\n\r\nimport Footer from 'components/organisms/footer/Footer';\r\nimport Header, { HeaderPropTypes } from 'components/organisms/header/Header';\r\n\r\nimport './DefaultLayout.scss';\r\n\r\nexport type DefaultLayoutNestedPropTypes = HeaderPropTypes;\r\n\r\nexport type DefaultLayoutPropTypes = DefaultLayoutNestedPropTypes & {\r\n  children: React.ReactElement;\r\n};\r\n\r\nconst DefaultLayout = ({ children, title }: DefaultLayoutPropTypes) => {\r\n  return (\r\n    <div className=\"app-content-wrapper\">\r\n      <Header title={title} />\r\n      <Box component=\"main\" py={4}>\r\n        <Container className=\"main-content-wrapper\" maxWidth=\"md\">\r\n          {children}\r\n        </Container>\r\n      </Box>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DefaultLayout;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport KeyboardCapslockIcon from '@material-ui/icons/KeyboardCapslock';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\n\r\nimport { TaskPriority } from 'models/task';\r\n\r\nimport './StatusIndicator.scss';\r\n\r\ntype PropTypes = {\r\n  status: TaskPriority;\r\n};\r\n\r\nconst StatusIndicator = ({ status }: PropTypes) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" className=\"status-indicator\">\r\n      {status === TaskPriority.COULD && (\r\n        <ExpandLessIcon fontSize=\"small\" color=\"disabled\" />\r\n      )}\r\n      {status === TaskPriority.SHOULD && (\r\n        <KeyboardCapslockIcon fontSize=\"small\" color=\"primary\" />\r\n      )}\r\n      {status === TaskPriority.MUST && (\r\n        <ArrowUpwardIcon fontSize=\"small\" color=\"secondary\" />\r\n      )}\r\n      <Typography component=\"p\" variant=\"caption\">\r\n        {status}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StatusIndicator;\r\n","import { Box, Card, Typography } from '@material-ui/core';\r\n\r\nimport { ITask } from 'models/task';\r\nimport StatusIndicator from '../status-indicator/StatusIndicator';\r\n\r\nimport './TaskPlate.scss';\r\n\r\ntype PropTypes = {\r\n  taskData: ITask;\r\n};\r\n\r\nconst TaskPlate = ({ taskData }: PropTypes) => {\r\n  return (\r\n    <Card className=\"task-plate\">\r\n      <Box p={1}>\r\n        <Typography\r\n          component=\"h6\"\r\n          variant=\"caption\"\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          {taskData.id}\r\n        </Typography>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          {taskData.title}\r\n        </Typography>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"flex-end\"\r\n        >\r\n          <StatusIndicator status={taskData.priority} />\r\n          <Typography\r\n            component=\"p\"\r\n            variant=\"caption\"\r\n            color=\"textSecondary\"\r\n            align=\"right\"\r\n          >\r\n            {`${taskData.name} ${taskData.surname}`}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskPlate;\r\n","import { Box, Typography } from '@material-ui/core';\r\n\r\nimport { ITask, TaskStatus } from 'models/task';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport TaskPlate from '../task-plate/TaskPlate';\r\n\r\nimport './TaskColumn.scss';\r\n\r\nexport type ColumnConfiguration = {\r\n  id: TaskStatus;\r\n  title: string;\r\n};\r\n\r\ntype PropTypes = {\r\n  config: ColumnConfiguration;\r\n  taskArray: ITask[];\r\n};\r\n\r\nconst TaskColumn = ({ config, taskArray }: PropTypes) => {\r\n  return (\r\n    <Box component=\"div\" p={1} className=\"task-column\">\r\n      <Typography className=\"title\" variant=\"h6\" align=\"center\">\r\n        {config.title}\r\n      </Typography>\r\n      <Droppable droppableId={config.id}>\r\n        {(droppableProvided) => (\r\n          <div ref={droppableProvided.innerRef} className=\"body\">\r\n            <Box mt={1} component={'div'}>\r\n              {taskArray.map((task, index) => (\r\n                <Draggable index={index} draggableId={task.id} key={task.id}>\r\n                  {(draggableProvided) => (\r\n                    <div>\r\n                      <div\r\n                        id={task.id}\r\n                        ref={draggableProvided.innerRef}\r\n                        {...draggableProvided.draggableProps}\r\n                        {...draggableProvided.dragHandleProps}\r\n                      >\r\n                        <TaskPlate taskData={task} />\r\n                      </div>\r\n                      {droppableProvided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n            </Box>\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskColumn;\r\n","import { observer } from 'mobx-react-lite';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\n\r\nimport { TaskStatus } from 'models/task';\r\nimport { ITaskStore } from 'storages/task.storage';\r\n\r\nimport TaskColumn, {\r\n  ColumnConfiguration,\r\n} from 'components/molecules/task-column/TaskColumn';\r\n\r\nimport './TaskBoard.scss';\r\n\r\nexport type BoardConfiguration = {\r\n  columns: ColumnConfiguration[];\r\n};\r\n\r\nconst boardConfiguration: BoardConfiguration = {\r\n  columns: [\r\n    { id: TaskStatus.PLAN, title: 'planned' },\r\n    { id: TaskStatus.IN_PROGRESS, title: 'in progress' },\r\n    { id: TaskStatus.TESTING, title: 'in testing' },\r\n    { id: TaskStatus.DONE, title: 'done' },\r\n  ],\r\n};\r\n\r\ntype PropTypes = {\r\n  store: ITaskStore;\r\n};\r\n\r\nconst TaskBoard = observer(({ store }: PropTypes) => {\r\n  const taskArray = store.tasks;\r\n\r\n  const dragHandler = (result: DropResult) => {\r\n    const destinationStatus = result.destination?.droppableId;\r\n    const sourceStatus = result.source.droppableId;\r\n\r\n    if (destinationStatus) {\r\n      if (destinationStatus !== sourceStatus) {\r\n        store.updateTaskStatusById(\r\n          result.draggableId,\r\n          destinationStatus as TaskStatus\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={dragHandler}>\r\n      <div className=\"task-board\">\r\n        {boardConfiguration.columns.map((columnConfing) => (\r\n          <TaskColumn\r\n            key={columnConfing.id}\r\n            config={columnConfing}\r\n            taskArray={taskArray.filter(\r\n              (task) => task.status === columnConfing.id\r\n            )}\r\n          ></TaskColumn>\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n});\r\n\r\nexport default TaskBoard;\r\n","import DefaultLayout, {\r\n  DefaultLayoutNestedPropTypes,\r\n} from 'components/layouts/default-layout/DefaultLayout';\r\nimport TaskBoard from 'components/organisms/task-board/TaskBoard';\r\nimport { ITaskStore } from 'storages/task.storage';\r\n\r\nimport './MainTemplate.scss';\r\n\r\ntype PropTypes = DefaultLayoutNestedPropTypes & {\r\n  taskStore: ITaskStore;\r\n};\r\n\r\nconst MainTemplate = ({ title, taskStore }: PropTypes) => {\r\n  return (\r\n    <DefaultLayout title={title}>\r\n      <TaskBoard store={taskStore} />\r\n    </DefaultLayout>\r\n  );\r\n};\r\n\r\nexport default MainTemplate;\r\n","export interface ILocalStorageService {\r\n  loadData: <T = any>(key: string) => T | false;\r\n  saveData: (key: string, data: any) => void;\r\n}\r\n\r\nclass LocalStorageService implements ILocalStorageService {\r\n  loadData<T = any>(key: string) {\r\n    const entitiesFromStore: T = JSON.parse(\r\n      localStorage.getItem(key) as string\r\n    );\r\n\r\n    if (!entitiesFromStore) {\r\n      return false;\r\n    }\r\n\r\n    return entitiesFromStore as T;\r\n  }\r\n\r\n  saveData(key: string, data: any) {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n  }\r\n}\r\n\r\nexport const LocalStorageServiceInstance = new LocalStorageService();\r\n","import { ITask } from 'models/task';\r\nimport {URL} from \"../utils/constants\";\r\n\r\nexport interface ITaskService {\r\n  fetchTasks(): Promise<ITask[]>;\r\n}\r\n\r\nclass TaskService implements ITaskService {\r\n  async fetchTasks() {\r\n    const res = await fetch(`${URL}/tasks.json`);\r\n    const result: ITask[] = await res.json();\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport const TaskServiceInstance = new TaskService();\r\n","import { makeAutoObservable } from 'mobx';\r\n\r\nimport { ITask, TaskStatus } from 'models/task';\r\nimport {\r\n  ILocalStorageService,\r\n  LocalStorageServiceInstance,\r\n} from 'services/local-storage.service';\r\nimport { ITaskService, TaskServiceInstance } from 'services/task.service';\r\nimport { LOCAL_STORAGE_TASKS_TAG } from 'utils/constants';\r\n\r\nexport interface ITaskStore {\r\n  transportLayer: ITaskService;\r\n  repositoriesLayer: ILocalStorageService;\r\n  tasks: ITask[];\r\n  isLoading: boolean;\r\n  updateTaskStatusById: (id: string, status: TaskStatus) => void;\r\n}\r\n\r\nclass TaskStore implements ITaskStore {\r\n  transportLayer: ITaskService;\r\n  repositoriesLayer: ILocalStorageService;\r\n\r\n  tasks: ITask[] = [];\r\n  isLoading = true;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.transportLayer = TaskServiceInstance;\r\n    this.repositoriesLayer = LocalStorageServiceInstance;\r\n\r\n    const tasksFromStorage = this.repositoriesLayer.loadData<ITask[]>(\r\n      LOCAL_STORAGE_TASKS_TAG\r\n    );\r\n\r\n    if (tasksFromStorage === false) {\r\n      this.loadTasks();\r\n    } else {\r\n      this.tasks = tasksFromStorage;\r\n    }\r\n  }\r\n\r\n  async loadTasks() {\r\n    this.isLoading = true;\r\n    this.tasks = await this.transportLayer.fetchTasks();\r\n    this.repositoriesLayer.saveData(LOCAL_STORAGE_TASKS_TAG, this.tasks);\r\n    this.isLoading = false;\r\n  }\r\n\r\n  updateTaskStatusById(id: string, status: TaskStatus) {\r\n    this.tasks = this.tasks.map((task) => {\r\n      if (task.id === id) {\r\n        return {\r\n          ...task,\r\n          status,\r\n        };\r\n      }\r\n\r\n      return task;\r\n    });\r\n    this.repositoriesLayer.saveData(LOCAL_STORAGE_TASKS_TAG, this.tasks);\r\n  }\r\n}\r\n\r\nexport const taskStore = new TaskStore();\r\n","import MainTemplate from 'components/templates/main-template/MainTemplate';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { taskStore } from 'storages/task.storage';\r\n\r\nconst HomePage = observer(() => {\r\n  return <MainTemplate title=\"Home\" taskStore={taskStore} />;\r\n});\r\n\r\nexport default HomePage;\r\n","import { Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport { ERROR_PATH, MAIN_PATH } from 'utils/constants';\r\n\r\nimport HomePage from 'components/pages/HomePage';\r\n\r\nconst MainRouter = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path={`${MAIN_PATH}`} component={HomePage} />\r\n      <Redirect to={`${ERROR_PATH}/404`} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default MainRouter;\r\n","import './ErrorTemplate.scss';\r\n\r\nconst ErrorTemplate = () => {\r\n  return <div>Error</div>;\r\n};\r\n\r\nexport default ErrorTemplate;\r\n","import ErrorTemplate from 'components/templates/error-template/ErrorTemplate';\r\n\r\nconst ErrorPage = () => {\r\n  return <ErrorTemplate />;\r\n};\r\n\r\nexport default ErrorPage;\r\n","import { Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport { ERROR_PATH } from 'utils/constants';\r\n\r\nimport ErrorPage from 'components/pages/ErrorPage';\r\n\r\nconst ErrorRouter = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={`${ERROR_PATH}/404`} component={ErrorPage} />\r\n      <Redirect to={`${ERROR_PATH}/404`} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default ErrorRouter;\r\n","import {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\n\r\nimport {BASENAME, ERROR_PATH, MAIN_PATH} from 'utils/constants';\r\n\r\nimport MainRouter from './main.router';\r\nimport ErrorRouter from './error.router';\r\n\r\nconst RootRouter = () => {\r\n  return (\r\n    <Router basename={BASENAME}>\r\n      <Switch>\r\n        <Route path={`${ERROR_PATH}`} component={ErrorRouter} />\r\n        <Route path={`${MAIN_PATH}`} component={MainRouter} />\r\n        <Redirect to={`${ERROR_PATH}/404`} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default RootRouter;\r\n","import RootRouter from 'routers/root.router';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RootRouter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}